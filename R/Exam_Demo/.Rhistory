hist(x)
shapiro.test(x)
x = rbinom(100, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rbinom(100000, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rbinom(4999, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rbinom(4999, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rbinom(1000, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rnorm(1000, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rnorm(1000, size =500, prob = 0.5)
hist(x)
shapiro.test(x)
x = rnorm(1000)
hist(x)
shapiro.test(x)
x = rnorm(10)
hist(x)
shapiro.test(x)
x = rnorm(4999)
hist(x)
shapiro.test(x)
x = rbinom(4999, size=100, prob = 0.01)
hist(x)
shapiro.test(x)
x = rbinom(4999, size=100, prob = 0.3)
hist(x)
shapiro.test(x)
library(nortest)
x<-rnorm(100)
ad.test(x)
x<-rnorm(100000)
ad.test(x)
x<-rbinom(10, size = 6, prob = 0.25)
ad.test(x)
x<-rbinom(10, size = 6, prob = 0.25)
ad.test(x)
x<-rbinom(3, size = 6, prob = 0.25)
ad.test(x)
x<-rbinom(7, size = 6, prob = 0.25)
ad.test(x)
x<-rbinom(1000, size = 6, prob = 0.25)
ad.test(x)
library(nortest)
x<-rbinom(1000, size = 6, prob = 0.25)
ad.test(x)
x
ad.test(vaginal_weight_non_na)
?ad.test
ad.test(rnorm(100, mean = 5, sd = 3))
ad.test(runif(100, min = 2, max = 4))
?rgamma
ad.test(rgamma(n = 1000, shape = 10)
ad.test(rgamma(n = 1000, shape = 10))
x = rgamma(n = 1000, shape = 10)
x
ad.test(x)
hist(x)
x = rgamma(n = 1000, shape = 10)
hist(x)
ad.test(x)
ad.test(vaginal_weight_non_na)
x = rnorm(1000000)
ad.test(x)
?ad.test
x = rnorm(1000000, mean = 1000, sd = 10)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 1)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 10)
hist(x)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 10)
hist(x)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 10)
hist(x)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 10)
hist(x)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 10)
hist(x)
ad.test(x)
x = rnorm(1000000, mean = 1000, sd = 100)
hist(x)
ad.test(x)
ad.test(vaginal_weight_non_na)
??ad.test
hist(vaginal_weight_non_na)
# Vì
ad.test(vaginal_weight_non_na)
ad.test(c_section_weight_non_na)
wilcox.test(
vaginal_weight_non_na,
c_section_weight_non_na,
paired = F,
conf.int = 0.99
)
wilcox.test(
vaginal_weight_non_na,
c_section_weight_non_na,
paired = F,
conf.int = 0.99
)
wilcox.test(
vaginal_weight_non_na,
c_section_weight_non_na,
paired = F,
conf.level = 0.99
)
inal_weight)
vaginal_weight_non_na = na.omit(vaginal_weight)
c_section_weight_non_na = na.omit(c_section_weight)
ad.test(vaginal_weight_non_na)
ad.test(c_section_weight_non_na)
# Vì cả 2 bộ dữ liệu độc lập và đều không có tính chuẩn
# nên phải dùng kiểm định phi tham số cho dữ liệu độc lập.
wilcox.test(
vaginal_weight_non_na,
c_section_weight_non_na,
paired = F,
conf.level = 0.99
)
# b
my_data2b = table(my_data2$DOB_WK, my_data2$DMETH_REC))
# b
my_data2b = table(my_data2$DOB_WK, my_data2$DMETH_REC)
my_data2b
chisq.test(my_data2b)
# c
vaginal_weight_non_na
# c
my_data2c = my_data2[my_data2$DMETH_REC == "Vaginal", my_data2$SEX]
# c
my_data2c = my_data2[my_data2$DMETH_REC == "Vaginal", my_data2$SEX]
my_data2c_non_na[1,1]
# c
my_data2c = my_data2[my_data2$DMETH_REC == "Vaginal", my_data2$SEX]
# c
my_data2c = my_data2[my_data2$DMETH_REC == "Vaginal", my_data2$SEX]
# c
my_data2c = my_data2[my_data2$DMETH_REC == "Vaginal", ]
my_data2c
my_data2c = my_data2c$SEX
my_data2c_non_na = na.omit(my_data2c)
my_data2c_non_na
male = my_data2c_non_na == "M"
male
male = my_data2c_non_na[my_data2c_non_na == "M"]
female = my_data2c_non_na[my_data2c_non_na == "F"]
male
nrow(male)
k_male = length(male)
k_female = length(female)
n = length(my_data2c_non_na)
prop.test(c(k_male, k_female), c(n, n), conf.level = 0.95)
?prop.test
my_data2d = na.omit(my_data2$DBWT)
my_data2d
my_data2$DBWT
my_data2d = na.omit(my_data2$DBWT)
my_data2d
?likelihood
??likelihood
library(MASS)
fitdistr(my_data2d)
?fitdistr
ad.test(my_data2d)
hist(my_data2d)
?fitdistr
# Trước tiên mình phải tìm phân phối của dữ liệu
fitdistr(my_data2d, "gamma")
rgamma(1000, shape = 2.267489e+01, rate = 6.945517e-03 )
x = rgamma(1000, shape = 2.267489e+01, rate = 6.945517e-03 )
plot(x)
hist(x)
x = rgamma(300000, shape = 2.267489e+01, rate = 6.945517e-03 )
hist(x)
hist(my_data2d)
x = rgamma(300000, shape = 2.267489e+01, rate = 6.945517e-03 )
hist(x)
hist(my_data2d)
hist(x)
hist(my_data2d)
# Trước tiên mình phải tìm phân phối của dữ liệu
fitdistr(my_data2d, "norm")
?fitdistr
# Trước tiên mình phải tìm phân phối của dữ liệu
fitdistr(my_data2d, "normal")
source("D:/DATA SCIENCE/GIT/DS/R/Exam_Demo/TuoiThoBongDen.r", echo=TRUE)
# Trước tiên mình phải tìm phân phối của dữ liệu
fitdistr(my_data2d, "gamma")
warnings()
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(100, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
hist(x)
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = -0.1)
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
hist(x)
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
hist(x)
?ks.test
ks.test(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rgamma(1000, shape = 5, rate = 0.1)
ks.test(x, "gamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rnorm(1000, shape = 5, rate = 0.1)
ks.test(x, "pnorm")
# Trước tiên mình phải tìm phân phối của dữ liệu
x = rnorm(1000, shape = 5, rate = 0.1)
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rnorm(1000)
ks.test(x, "pnorm")
?rgamma
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rgamma(1000, 5)
ks.test(x, "pgamma")
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rgamma(1000, 5)
ks.test(x, "pgamma", shape=5)
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rgamma(1000, 5)
fitdistr(x, "gamma")
ks.test(x, "pgamma", shape=4.75)
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rgamma(10000, 5)
fitdistr(x, "gamma")
ks.test(x, "pgamma", shape=4.899)
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rgamma(10000, 5)
fitdistr(x, "gamma")
ks.test(x, "pgamma", shape=4.98)
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
x = rgamma(10000, 5)
fitdistr(x, "gamma")
ks.test(x, "pgamma", shape=5.07)
x = rgamma(10000, 5)
fitdistr(x, "gamma")
my_data2d = na.omit(my_data2$DBWT)
my_data2d
fitdistr(my_data2d, "gamma")
fitdistr(my_data2d, "normal")
fitdistr(my_data2d, "normal", sd = sqrt(500000))
round(3264.6715586, 3)
fitdistr(my_data2d, "normal")
?fitdistr
fitdistr(my_data2d, "normal", list(sigma.x = sqrt(500000)))
?dnorm
fitdistr(my_data2d, "normal", list(sd = sqrt(500000)))
fitdistr(my_data2d, "normal", list(sd=sqrt(500000)))
fitdistr(my_data2d, "normal", list(sd=sqrt(500000))
fitdistr(my_data2d, "normal", list(sd=sqrt(500000)))
fitdistr(my_data2d, "normal", list(sd=sqrt(500000)))
?fitdistr
fitdistr(my_data2d, "dnorm", list(sd=sqrt(500000)))
fitdistr(my_data2d, "normal")
fitdistr(my_data2d, "normal", sd = 500)
fitdistr(my_data2d, "normal", sd = sqrt(500000))
options(op)
fitdistr(my_data2d, dnorm, sd = sqrt(500000))
fitdistr(my_data2d, dnorm, list(sd = sqrt(500000)))
fitdistr(my_data2d, dnorm, list(mean = 3200))
fitdistr(my_data2d, "normal")
source("D:/DATA SCIENCE/GIT/DS/R/Exam_Demo/TuoiThoBongDen.r", echo=TRUE)
?anova
?aov
# Câu 3
my_data3 = read.csv("Thoigiansong.csv")
# Câu 3
my_data3 = read.csv("Thoigiansong.csv")
fitdistr(my_data2d, "gamma")
result = fitdistr(my_data2d, "gamma")
result$estimate
result$estimate[1]
result$estimate[1] / result$estimate[2]
result$estimate[1] / result$estimate[2] ^ 2
# result$estimate[1] / result$estimate[2] ^ 2
?fitdistr
result = fitdistr(my_data2d, "gamma", sd = sqrt(500000))
result = fitdistr(my_data2d, "gamma", list(sd = sqrt(500000)))
result = fitdistr(my_data2d, "gamma", list(sd = sqrt(500000), ))
result = fitdistr(my_data2d, "gamma")
predefined_variance = 500000
custom_likelihood = function(params) {
mu <- params[1]
sigma2 <- predefined_variance  # Fixing the variance
neg_log_likelihood <- -sum(dnorm(my_data2d, mean = mu, sd = sqrt(sigma2), log = TRUE))
return(neg_log_likelihood)
}
initial_params <- list(mean = mean(my_data2d))
fitdistr(x = NULL, fn = custom_likelihood, start = initial_params)
fitdistr(x = my_data2d, fn = custom_likelihood, start = initial_params)
predefined_variance = 500000
custom_likelihood = function(params) {
mu <- params[1]
sigma2 <- predefined_variance  # Fixing the variance
neg_log_likelihood <- -sum(dnorm(my_data2d, mean = mu, sd = sqrt(sigma2), log = TRUE))
return(neg_log_likelihood)
}
initial_params <- list(mean = mean(my_data2d))
fitdistr(x = my_data2d, fn = custom_likelihood, start = initial_params)
fit_distribution <- function(data, predefined_variance) {
custom_likelihood <- function(params) {
mu <- params[1]
sigma2 <- predefined_variance  # Fixing the variance
neg_log_likelihood <- -sum(dnorm(data, mean = mu, sd = sqrt(sigma2), log = TRUE))
return(neg_log_likelihood)
}
initial_params <- list(mean = mean(data))
fit <- fitdistr(x = data, fn = custom_likelihood, start = initial_params)
return(fit)
}
# Usage:
predefined_variance <- 500000
my_data2d <- rnorm(100, mean = 5, sd = sqrt(predefined_variance))
result <- fit_distribution(my_data2d, predefined_variance)
my_data2d
# Câu 1
my_data1 = read.csv("TuoiThoBongDen.csv")
my_data1
before = my_data1$Truoc.Cai.Tien.KT
after = my_data1$Sau.Cai.Tien.KT
# Kiểm tra dữ liệu tuân theo phân phối chuẩn
shapiro.test(before)
shapiro.test(after)
# => Vì p_value của dữ liệu trước và sau cải tiến đều thấp hơn 0.05
# => Phải dùng kiểm định phi tham số
# => Vì bóng đèn trước và sau cải tiến là độc lập nên
# Ta sử dụng Mann-Whitney U Test
# H0: Bóng đèn trước và sau cải tiến không khác nhau: mu_1 = mu_2
# H1: Bóng đèn sau cải tiến tốt hơn: mu_1 < mu_2
wilcox.test(
before,
after,
exact = F,
conf.int = T,
paired = F,
alternative = "less",
)
# Vì p_value = 0.0874 > 0.05
# Ta chấp nhận giả thuyết H0
# Bóng đèn trước và sau cải tiến không khác nhau với mức ý nghĩa 0.05
# Câu 2
load("births2006.smpl.rda")
my_data2 = births2006.smpl
my_data2
# a
vaginal = my_data2[my_data2$DMETH_REC == "Vaginal",]
c_section = my_data2[my_data2$DMETH_REC == "C-section",]
vaginal_weight = vaginal$DBWT
c_section_weight = c_section$DBWT
vaginal_weight_non_na = na.omit(vaginal_weight)
c_section_weight_non_na = na.omit(c_section_weight)
ad.test(vaginal_weight_non_na)
ad.test(c_section_weight_non_na)
# Vì cả 2 bộ dữ liệu độc lập và đều không có tính chuẩn
# nên phải dùng kiểm định phi tham số cho dữ liệu độc lập.
# H0: Trọng lượng trung bình trẻ sơ sinh ở các bà mẹ sinh thường
# và các bà mẹ sinh mổ như nhau. mu1 = mu2
# H1: Trọng lượng trung bình trẻ sơ sinh ở các bà mẹ sinh thường
# và các bà mẹ sinh mổ khác nhau. mu1 != mu2
wilcox.test(
vaginal_weight_non_na,
c_section_weight_non_na,
paired = F,
conf.level = 0.99
)
# Vì p_value nhỏ hơn 0.01 nên ta bác bỏ giả thiết H0
# Trọng lượng trung bình trẻ sơ sinh ở các bà mẹ sinh thường
# và các bà mẹ sinh mổ khác nhau với mức ý nghĩa 0.01.
# b
my_data2b = table(my_data2$DOB_WK, my_data2$DMETH_REC)
my_data2b
chisq.test(my_data2b)
# Vì p_value rất nhỏ => Bác bỏ H0.
# c
my_data2c = my_data2[my_data2$DMETH_REC == "Vaginal",]
my_data2c = my_data2c$SEX
my_data2c_non_na = na.omit(my_data2c)
my_data2c_non_na
male = my_data2c_non_na[my_data2c_non_na == "M"]
female = my_data2c_non_na[my_data2c_non_na == "F"]
k_male = length(male)
k_female = length(female)
n = length(my_data2c_non_na)
prop.test(c(k_male, k_female), c(n, n), conf.level = 0.95)
# Vì p_value rất nhỏ nên ta bác bỏ giả thiết H0
# d
library(MASS)
my_data2d = na.omit(my_data2$DBWT)
my_data2d
# Trước tiên mình phải tìm phân phối của dữ liệu
# x = rgamma(1000, shape = 5, rate = 0.1)
result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
? fitdistr
ks.test(my_data2d)
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
ks.test(my_data2d, "gamma")
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
ks.test(my_data2d, "pgamma")
my_data2d
library(fitdistrplus)
install.packages(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
descdist(my_data2d, discrete = FALSE)
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
my_data2d
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
typeof(my_data2d)
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
fitdist(x, "norm")
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
fitdist(my_data2d, "norm")
my_data2d = na.omit(my_data2$DBWT)
my_data2d
my_data2d
my_data2d[1]
my_data2d[2]
typeof(my_data2d)
my_data2d = as.vector(na.omit(my_data2$DBWT))
my_data2d
typeof(my_data2d)
typeof(c(1,2,3))
my_data2d
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
fitdist(my_data2d, "norm")
?fitdist
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
fitdist(my_data2d, "gamma", method="mle")
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
fitdist(my_data2d, "lnorm", method="mle")
var(my_data2d)
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
fitdist(my_data2d, "norm")
# result = fitdistr(my_data2d, "gamma")
# result$estimate[1] / result$estimate[2] ^ 2
# ? fitdistr
# ks.test(my_data2d, "pgamma")
result = fitdist(my_data2d, "norm")
plot(result)
plot(result)
plot(result)
